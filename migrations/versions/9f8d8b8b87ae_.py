"""empty message

Revision ID: 9f8d8b8b87ae
Revises: 7a1bb333f6f8
Create Date: 2023-09-13 02:25:00.319602

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9f8d8b8b87ae'
down_revision = '7a1bb333f6f8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('consulta', schema=None) as batch_op:
        batch_op.alter_column('realization_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.alter_column('consultation_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
        batch_op.drop_constraint('consulta_consultation_date_key', type_='unique')
        batch_op.drop_constraint('consulta_realization_date_key', type_='unique')

    with op.batch_alter_table('profesional', schema=None) as batch_op:
        batch_op.alter_column('registration_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('registration_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('registration_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)

    with op.batch_alter_table('profesional', schema=None) as batch_op:
        batch_op.alter_column('registration_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)

    with op.batch_alter_table('consulta', schema=None) as batch_op:
        batch_op.create_unique_constraint('consulta_realization_date_key', ['realization_date'])
        batch_op.create_unique_constraint('consulta_consultation_date_key', ['consultation_date'])
        batch_op.alter_column('consultation_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
        batch_op.alter_column('realization_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)

    # ### end Alembic commands ###
